{"version":3,"sources":["components/Highlight.js","usb/index.js","App.js","serviceWorker.js","index.js"],"names":["Highlight","props","rawCardBits","binary","cardNumBits","card","facilityNumBits","facility","searchBits","split","cardStart","lastIndexOf","facilityStart","splice","length","react_default","a","createElement","react","map","chunk","index","style","backgroundColor","key","serial","navigator","usb","getDevices","then","devices","device","Port","requestDevice","filters","vendorId","catch","err","console","log","this","device_","prototype","connect","_this","open","configuration","selectConfiguration","claimInterface","selectAlternateInterface","controlTransferOut","requestType","recipient","request","value","readLoop","transferIn","result","onReceive","data","error","onReceiveError","disconnect","_this2","close","send","transferOut","USBDevice","Reader","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","inputHex","dispHex","orderedHex","bits","dispBinary","decodeBinary","decodeLength","cardNumber","cardBits","cardLength","cardChunk","facilityChunk","facilityLength","facilityCode","facilityBits","showDecode","showSettings","reverse","handleUserInput","bind","assertThisInitialized","handleCardNumber","handleFacilityCode","handleHex","handleBits","handleDecodeBits","handleReverse","handleSettings","handleShowSettings","connectButton","connectUSB","setState","connected","requestPort","selectedPort","window","Materialize","toast","_this3","cardJSON","TextDecoder","decode","JSON","parse","readerBits","readerHex","hex","e","target","id","settings","_this4","defineProperty","parseInt","repeat","slice","join","_this5","_this6","toString","inputBits","_this7","cut","raw","reversedHex","_this8","toUpperCase","parsedHex","match","reduce","x","substr","bin","binaryOut","_this9","lib","title","className","s","name","type","label","checked","disabled","onClick","htmlFor","onChange","display","margin","components_Highlight","color","fontWeight","paddingTop","min","Component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c371975f.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nconst Highlight = props => {\r\n\tconst rawCardBits = props.binary\r\n\tconst cardNumBits = props.card\r\n\tconst facilityNumBits = props.facility\r\n\tlet searchBits = rawCardBits.split('')\r\n\tlet cardStart = rawCardBits.lastIndexOf(cardNumBits)\r\n\tlet facilityStart = rawCardBits.lastIndexOf(facilityNumBits)\r\n\tif (cardStart >= 0) {\r\n\t\tsearchBits.splice(cardStart, cardNumBits.length, cardNumBits)\r\n\t}\r\n\tif (facilityStart >= 0) {\r\n\t\tsearchBits.splice(facilityStart, facilityNumBits.length, facilityNumBits)\r\n\t}\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t{searchBits.map((chunk, index) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<span\r\n\t\t\t\t\t\tstyle={\r\n\t\t\t\t\t\t\tchunk === facilityNumBits\r\n\t\t\t\t\t\t\t\t? { backgroundColor: 'lightgreen' }\r\n\t\t\t\t\t\t\t\t: chunk === cardNumBits\r\n\t\t\t\t\t\t\t\t? { backgroundColor: 'yellow' }\r\n\t\t\t\t\t\t\t\t: null\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{chunk}\r\n\t\t\t\t\t</span>\r\n\t\t\t\t)\r\n\t\t\t})}\r\n\t\t</Fragment>\r\n\t)\r\n}\r\n\r\nexport default Highlight\r\n","let serial = {}\n\nserial.getPorts = function() {\n\treturn navigator.usb.getDevices().then(devices => {\n\t\treturn devices.map(device => new serial.Port(device))\n\t})\n}\n\nserial.requestPort = function() {\n\tconst filters = [{ vendorId: 0x1b4f }]\n\treturn navigator.usb\n\t\t.requestDevice({ filters })\n\t\t.then(device => new serial.Port(device))\n\t\t.catch(err => console.log(err))\n}\n\nserial.Port = function(device) {\n\tthis.device_ = device\n}\n\nserial.Port.prototype.connect = function() {\n\tlet readLoop = () => {\n\t\tthis.device_.transferIn(5, 64).then(\n\t\t\tresult => {\n\t\t\t\tthis.onReceive(result.data)\n\t\t\t\treadLoop()\n\t\t\t},\n\t\t\terror => {\n\t\t\t\tthis.onReceiveError(error)\n\t\t\t}\n\t\t)\n\t}\n\n\treturn this.device_\n\t\t.open()\n\t\t.then(() => {\n\t\t\tif (this.device_.configuration === null) {\n\t\t\t\treturn this.device_.selectConfiguration(1)\n\t\t\t}\n\t\t})\n\t\t.then(() => this.device_.claimInterface(2))\n\t\t.then(() => this.device_.selectAlternateInterface(2, 0))\n\t\t.then(() =>\n\t\t\tthis.device_.controlTransferOut({\n\t\t\t\trequestType: 'class',\n\t\t\t\trecipient: 'interface',\n\t\t\t\trequest: 0x22,\n\t\t\t\tvalue: 0x01,\n\t\t\t\tindex: 0x02\n\t\t\t})\n\t\t)\n\t\t.then(() => {\n\t\t\treadLoop()\n\t\t})\n}\n\nserial.Port.prototype.disconnect = function() {\n\treturn this.device_\n\t\t.controlTransferOut({\n\t\t\trequestType: 'class',\n\t\t\trecipient: 'interface',\n\t\t\trequest: 0x22,\n\t\t\tvalue: 0x00,\n\t\t\tindex: 0x02\n\t\t})\n\t\t.then(() => this.device_.close())\n}\n\nserial.Port.prototype.send = function(data) {\n\treturn this.device_.transferOut(4, data)\n}\n\nexport default serial\n","import React, { Component, Fragment } from 'react'\nimport { Card, Col, Input, Row } from 'react-materialize'\nimport Highlight from './components/Highlight'\nimport serial from './usb'\n\nlet USBDevice\n\nclass Reader extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tinputHex: '',\n\t\t\tdispHex: '',\n\t\t\torderedHex: '',\n\t\t\tbits: '',\n\t\t\tbinary: '',\n\t\t\tdispBinary: '',\n\t\t\tdecodeBinary: [],\n\t\t\tdecodeLength: 0,\n\t\t\tcardNumber: '',\n\t\t\tcardBits: '',\n\t\t\tcardStart: 0,\n\t\t\tcardLength: 0,\n\t\t\tcardChunk: '',\n\t\t\tfacilityChunk: '',\n\t\t\tfacilityStart: 0,\n\t\t\tfacilityLength: 0,\n\t\t\tfacilityCode: '',\n\t\t\tfacilityBits: '',\n\t\t\tshowDecode: false,\n\t\t\tshowSettings: false,\n\t\t\treverse: true\n\t\t} //Sample - 77 9A C7 03\n\t\tthis.handleUserInput = this.handleUserInput.bind(this)\n\t\tthis.handleCardNumber = this.handleCardNumber.bind(this)\n\t\tthis.handleFacilityCode = this.handleFacilityCode.bind(this)\n\t\tthis.handleHex = this.handleHex.bind(this)\n\t\tthis.handleBits = this.handleBits.bind(this)\n\t\tthis.handleDecodeBits = this.handleDecodeBits.bind(this)\n\t\tthis.handleReverse = this.handleReverse.bind(this)\n\t\tthis.handleSettings = this.handleSettings.bind(this)\n\t\tthis.handleShowSettings = this.handleShowSettings.bind(this)\n\t\tthis.connectButton = this.connectButton.bind(this)\n\t\tthis.connectUSB = this.connectUSB.bind(this)\n\t}\n\n\tconnectButton() {\n\t\tif (USBDevice) {\n\t\t\tUSBDevice.disconnect()\n\t\t\tUSBDevice = null\n\t\t\tthis.setState({\n\t\t\t\tconnected: false,\n\t\t\t\treverse: true\n\t\t\t})\n\t\t} else {\n\t\t\tserial\n\t\t\t\t.requestPort()\n\t\t\t\t.then(selectedPort => {\n\t\t\t\t\tUSBDevice = selectedPort\n\t\t\t\t\tthis.connectUSB()\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tconnected: true,\n\t\t\t\t\t\treverse: false\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tconnected: false\n\t\t\t\t\t})\n\t\t\t\t\twindow.Materialize.toast('No USB device selected.', 5000)\n\t\t\t\t})\n\t\t}\n\t}\n\n\tconnectUSB() {\n\t\tUSBDevice.connect().then(\n\t\t\t() => {\n\t\t\t\tUSBDevice.onReceive = data => {\n\t\t\t\t\tlet textDecoder = new TextDecoder()\n\t\t\t\t\tlet cardJSON = textDecoder.decode(data)\n\t\t\t\t\tcardJSON = JSON.parse(cardJSON)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\treaderBits: cardJSON.bits,\n\t\t\t\t\t\treaderHex: cardJSON.hex\n\t\t\t\t\t})\n\t\t\t\t\tthis.handleHex(cardJSON.hex)\n\t\t\t\t\tthis.handleBits(cardJSON.bits)\n\t\t\t\t}\n\t\t\t\tUSBDevice.onReceiveError = error => {\n\t\t\t\t\twindow.Materialize.toast(error, 5000)\n\t\t\t\t}\n\t\t\t},\n\t\t\terror => {\n\t\t\t\twindow.Materialize.toast(error, 5000)\n\t\t\t}\n\t\t)\n\t}\n\n\t//Preprocess user inputs to simply logic used elsewhere.\n\thandleUserInput(e) {\n\t\tswitch (e.target.id) {\n\t\t\tcase 'HEX':\n\t\t\t\tthis.handleHex(e.target.value)\n\t\t\t\tbreak\n\t\t\tcase 'BITS':\n\t\t\t\tthis.handleBits(e.target.value)\n\t\t\t\tbreak\n\t\t\tcase 'CARD':\n\t\t\t\tthis.handleCardNumber(e.target.value)\n\t\t\t\tbreak\n\t\t\tcase 'FACILITY':\n\t\t\t\tthis.handleFacilityCode(e.target.value)\n\t\t\t\tbreak\n\t\t\tcase 'SITESTART':\n\t\t\t\tthis.handleSettings({ key: 'facilityStart', value: e.target.value })\n\t\t\t\tbreak\n\t\t\tcase 'SITELENGTH':\n\t\t\t\tthis.handleSettings({\n\t\t\t\t\tkey: 'facilityLength',\n\t\t\t\t\tvalue: e.target.value\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\tcase 'CARDSTART':\n\t\t\t\tthis.handleSettings({ key: 'cardStart', value: e.target.value })\n\t\t\t\tbreak\n\t\t\tcase 'CARDLENGTH':\n\t\t\t\tthis.handleSettings({ key: 'cardLength', value: e.target.value })\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\thandleSettings(settings) {\n\t\t//TODO: logic needed to prevent the site code and card number from overlapping.\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\t[settings.key]: parseInt(settings.value, 10)\n\t\t\t},\n\t\t\t() => this.handleDecodeBits()\n\t\t)\n\t}\n\n\thandleDecodeBits() {\n\t\t//Only process if the settings section is being displayed.\n\t\tif (this.state.showSettings) {\n\t\t\tlet decodeBinary = '*'.repeat(this.state.bits)\n\t\t\tdecodeBinary = decodeBinary.split('')\n\t\t\tlet facilityChunk = 'F'.repeat(this.state.facilityLength)\n\t\t\tlet cardChunk = 'C'.repeat(this.state.cardLength)\n\t\t\tif (this.state.cardLength > 0)\n\t\t\t\tdecodeBinary.splice(\n\t\t\t\t\tthis.state.cardStart,\n\t\t\t\t\tthis.state.cardLength,\n\t\t\t\t\tcardChunk\n\t\t\t\t)\n\t\t\tif (this.state.facilityLength > 0)\n\t\t\t\tdecodeBinary.splice(\n\t\t\t\t\tthis.state.facilityStart,\n\t\t\t\t\tthis.state.facilityLength,\n\t\t\t\t\tfacilityChunk\n\t\t\t\t)\n\t\t\tlet facilityBits = this.state.dispBinary.slice(\n\t\t\t\tthis.state.facilityStart,\n\t\t\t\tthis.state.facilityStart + this.state.facilityLength\n\t\t\t)\n\t\t\tlet cardBits = this.state.dispBinary.slice(\n\t\t\t\tthis.state.cardStart,\n\t\t\t\tthis.state.cardStart + this.state.cardLength\n\t\t\t)\n\t\t\tlet decodeLength = decodeBinary.join('').length\n\t\t\tlet cardNumber = parseInt(cardBits, 2) || 0\n\t\t\tlet facilityCode = parseInt(facilityBits, 2) || 0\n\t\t\tthis.setState({\n\t\t\t\tdecodeBinary,\n\t\t\t\tdecodeLength,\n\t\t\t\tcardBits,\n\t\t\t\tfacilityBits,\n\t\t\t\tcardNumber,\n\t\t\t\tfacilityCode,\n\t\t\t\tfacilityChunk,\n\t\t\t\tcardChunk\n\t\t\t})\n\t\t}\n\t}\n\n\thandleShowSettings() {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tshowSettings: !this.state.showSettings,\n\t\t\t\tfacilityCode: '',\n\t\t\t\tcardNumber: '',\n\t\t\t\tfacilityStart: 0,\n\t\t\t\tfacilityLength: 0,\n\t\t\t\tcardStart: 0,\n\t\t\t\tcardLength: 0\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tthis.handleCardNumber()\n\t\t\t\tthis.handleFacilityCode()\n\t\t\t\tthis.handleDecodeBits()\n\t\t\t}\n\t\t)\n\t}\n\n\thandleReverse() {\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\treverse: !this.state.reverse\n\t\t\t},\n\t\t\t() => this.handleHex(this.state.inputHex)\n\t\t)\n\t}\n\n\thandleCardNumber(cardNumber) {\n\t\tlet cardBits = parseInt(cardNumber, 10).toString(2)\n\t\tthis.setState({\n\t\t\tcardNumber,\n\t\t\tcardBits\n\t\t})\n\t}\n\n\thandleFacilityCode(facilityCode) {\n\t\tlet facilityBits = parseInt(facilityCode, 10).toString(2)\n\t\tthis.setState({\n\t\t\tfacilityCode,\n\t\t\tfacilityBits\n\t\t})\n\t}\n\n\thandleBits(inputBits) {\n\t\tlet cut = this.state.binary.length - inputBits\n\t\tlet dispBinary = this.state.binary.slice(cut)\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tbits: inputBits,\n\t\t\t\tdispBinary\n\t\t\t},\n\t\t\t() => this.handleDecodeBits()\n\t\t)\n\t}\n\n\thandleHex(raw) {\n\t\tlet inputHex = raw.toUpperCase()\n\t\tlet parsedHex = inputHex.match(/[0-9a-f]{2}/gi) || ''\n\t\tlet reversedHex\n\t\tif (parsedHex.length > 0) {\n\t\t\tif (this.state.reverse) {\n\t\t\t\treversedHex = parsedHex.slice().reverse()\n\t\t\t} else {\n\t\t\t\treversedHex = parsedHex\n\t\t\t}\n\t\t\tlet dispHex = parsedHex.reduce((result, x) => {\n\t\t\t\tresult = result + ' ' + x\n\t\t\t\treturn result\n\t\t\t}, '')\n\t\t\t//Reverse HEX and convert to binary with padding.\n\t\t\tlet orderedHex = reversedHex.reduce(\n\t\t\t\t(result, x) => {\n\t\t\t\t\tresult.hex = result.hex + ' ' + x\n\t\t\t\t\tlet binary = parseInt(x, 16).toString(2)\n\t\t\t\t\tbinary = '00000000'.substr(binary.length) + binary\n\t\t\t\t\tresult.bin = result.bin + binary\n\t\t\t\t\treturn result\n\t\t\t\t},\n\t\t\t\t{ hex: '', bin: '' }\n\t\t\t)\n\t\t\tlet cut = orderedHex.bin.length - this.state.bits || 0\n\t\t\tlet binaryOut = orderedHex.bin.slice(cut)\n\t\t\tthis.setState(\n\t\t\t\t{\n\t\t\t\t\tinputHex,\n\t\t\t\t\tdispHex,\n\t\t\t\t\torderedHex: orderedHex.hex,\n\t\t\t\t\tbinary: orderedHex.bin,\n\t\t\t\t\tdispBinary: binaryOut,\n\t\t\t\t\tshowDecode: true\n\t\t\t\t},\n\t\t\t\t() => this.handleDecodeBits()\n\t\t\t)\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tinputHex,\n\t\t\t\tshowDecode: false\n\t\t\t})\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Card title=\"Card Decoder Tool\" className=\"decoder\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ts={4}\n\t\t\t\t\t\t\tname=\"group1\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tvalue=\"reverse\"\n\t\t\t\t\t\t\tlabel=\"Reverse Raw Hex\"\n\t\t\t\t\t\t\tchecked={this.state.reverse}\n\t\t\t\t\t\t\tdisabled={this.state.connected}\n\t\t\t\t\t\t\tonClick={this.handleReverse}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ts={4}\n\t\t\t\t\t\t\tonClick={this.connectButton}\n\t\t\t\t\t\t\tname=\"group1\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tvalue=\"connected\"\n\t\t\t\t\t\t\tlabel=\"Connect USB Reader\"\n\t\t\t\t\t\t\tchecked={this.state.connected}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\ts={4}\n\t\t\t\t\t\t\tname=\"group1\"\n\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\tvalue=\"settings\"\n\t\t\t\t\t\t\tlabel=\"Show Reader Settings\"\n\t\t\t\t\t\t\tchecked={this.state.showSettings}\n\t\t\t\t\t\t\tonClick={this.handleShowSettings}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t{this.state.connected ? (\n\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t<div className=\"col s5\">\n\t\t\t\t\t\t\t\t\t<label className=\"active\" htmlFor=\"inputHex\">\n\t\t\t\t\t\t\t\t\t\tRaw Hex Value\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<p id=\"inputHex\">{this.state.inputHex}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t\t\t<label className=\"active\" htmlFor=\"inputBits\">\n\t\t\t\t\t\t\t\t\t\tCard Bits\n\t\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t\t<p id=\"inputBits\">{this.state.bits}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tid=\"HEX\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\ts={5}\n\t\t\t\t\t\t\t\t\tlabel=\"Raw Hex Value\"\n\t\t\t\t\t\t\t\t\tvalue={this.state.inputHex}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tid=\"BITS\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\ts={2}\n\t\t\t\t\t\t\t\t\tlabel=\"Card Bits\"\n\t\t\t\t\t\t\t\t\tvalue={this.state.bits}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<Col s={1} />\n\t\t\t\t\t\t{this.state.showSettings ? (\n\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t\t\t<label className=\"active\">Facility Code</label>\n\t\t\t\t\t\t\t\t\t<p>{this.state.facilityCode}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t\t\t<label className=\"active\">Card Number</label>\n\t\t\t\t\t\t\t\t\t<p>{this.state.cardNumber}</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tid=\"FACILITY\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\ts={2}\n\t\t\t\t\t\t\t\t\tlabel=\"Facility Code\"\n\t\t\t\t\t\t\t\t\tvalue={this.state.facilityCode}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<Input\n\t\t\t\t\t\t\t\t\tid=\"CARD\"\n\t\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\t\ts={2}\n\t\t\t\t\t\t\t\t\tlabel=\"Card Number\"\n\t\t\t\t\t\t\t\t\tvalue={this.state.cardNumber}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</Fragment>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row style={this.state.showDecode ? null : { display: 'none' }}>\n\t\t\t\t\t\t<div className=\"col s6\">\n\t\t\t\t\t\t\t<label className=\"active\" htmlFor=\"parsedHex\">\n\t\t\t\t\t\t\t\tParsed Hex\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<p id=\"parsedHex\">{this.state.dispHex}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={this.state.reverse ? null : { display: 'none' }}\n\t\t\t\t\t\t\tclassName=\"col s6\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<label className=\"active\" htmlFor=\"reverseHex\">\n\t\t\t\t\t\t\t\tReversed Hex\n\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t<p id=\"reverseHex\">{this.state.orderedHex}</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s12 divider\" style={{ margin: '5px' }} />\n\t\t\t\t\t\t<div className=\"col s12\">\n\t\t\t\t\t\t\t<label htmlFor=\"bits\">Binary</label>\n\t\t\t\t\t\t\t<p className=\"binary\">\n\t\t\t\t\t\t\t\t<Highlight\n\t\t\t\t\t\t\t\t\tbinary={this.state.dispBinary}\n\t\t\t\t\t\t\t\t\tcard={this.state.cardBits}\n\t\t\t\t\t\t\t\t\tfacility={this.state.facilityBits}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t!this.state.showSettings\n\t\t\t\t\t\t\t\t\t? { display: 'none' }\n\t\t\t\t\t\t\t\t\t: this.state.decodeLength > this.state.bits\n\t\t\t\t\t\t\t\t\t? { color: 'red', fontWeight: 'bold' }\n\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tclassName=\"col s12 binary\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{this.state.decodeBinary.map((chunk, index) => (\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t\t\t\tchunk === this.state.facilityChunk\n\t\t\t\t\t\t\t\t\t\t\t? { backgroundColor: 'lightgreen' }\n\t\t\t\t\t\t\t\t\t\t\t: chunk === this.state.cardChunk\n\t\t\t\t\t\t\t\t\t\t\t? { backgroundColor: 'yellow' }\n\t\t\t\t\t\t\t\t\t\t\t: null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{chunk}\n\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s12 divider\" />\n\t\t\t\t\t</Row>\n\t\t\t\t\t<Row\n\t\t\t\t\t\tstyle={this.state.showSettings ? null : { display: 'none' }}\n\t\t\t\t\t>\n\t\t\t\t\t\t<Col s={1} />\n\t\t\t\t\t\t<div style={{ paddingTop: '15px' }} className=\"col s1\">\n\t\t\t\t\t\t\tFacility Code\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t<label className=\"active\">Start Bit</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"SITESTART\"\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\tvalue={this.state.facilityStart}\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t<label className=\"active\">Number of Bits</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"SITELENGTH\"\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\tvalue={this.state.facilityLength}\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div style={{ paddingTop: '15px' }} className=\"col s1\">\n\t\t\t\t\t\t\tCard Number\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t<label className=\"active\">Start Bit</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"CARDSTART\"\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\tvalue={this.state.cardStart}\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s2\">\n\t\t\t\t\t\t\t<label className=\"active\">Number of Bits</label>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tid=\"CARDLENGTH\"\n\t\t\t\t\t\t\t\tonChange={this.handleUserInput}\n\t\t\t\t\t\t\t\tvalue={this.state.cardLength}\n\t\t\t\t\t\t\t\tmin=\"0\"\n\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col s12 divider\" />\n\t\t\t\t\t</Row>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Reader\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n\twindow.location.hostname === 'localhost' ||\r\n\t\t// [::1] is the IPv6 localhost address.\r\n\t\twindow.location.hostname === '[::1]' ||\r\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\r\n\t\twindow.location.hostname.match(\r\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n\t\t)\r\n)\r\n\r\nexport function register(config) {\r\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n\t\t// The URL constructor is available in all browsers that support SW.\r\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n\t\tif (publicUrl.origin !== window.location.origin) {\r\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\r\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\r\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\twindow.addEventListener('load', () => {\r\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n\t\t\tif (isLocalhost) {\r\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\r\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\r\n\r\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\r\n\t\t\t\t// service worker/PWA documentation.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\r\n\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\r\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n\t\t\t\t\t)\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// Is not localhost. Just register service worker\r\n\t\t\t\tregisterValidSW(swUrl, config)\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n\tnavigator.serviceWorker\r\n\t\t.register(swUrl)\r\n\t\t.then(registration => {\r\n\t\t\tregistration.onupdatefound = () => {\r\n\t\t\t\tconst installingWorker = registration.installing\r\n\t\t\t\tif (installingWorker == null) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\tinstallingWorker.onstatechange = () => {\r\n\t\t\t\t\tif (installingWorker.state === 'installed') {\r\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\r\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\r\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\r\n\t\t\t\t\t\t\t// content until all client tabs are closed.\r\n\t\t\t\t\t\t\tconsole.log(\r\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\r\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n\t\t\t\t\t\t\t)\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\r\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// At this point, everything has been precached.\r\n\t\t\t\t\t\t\t// It's the perfect time to display a\r\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\r\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\r\n\r\n\t\t\t\t\t\t\t// Execute callback\r\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\r\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(error => {\r\n\t\t\tconsole.error('Error during service worker registration:', error)\r\n\t\t})\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n\t// Check if the service worker can be found. If it can't reload the page.\r\n\tfetch(swUrl)\r\n\t\t.then(response => {\r\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\r\n\t\t\tconst contentType = response.headers.get('content-type')\r\n\t\t\tif (\r\n\t\t\t\tresponse.status === 404 ||\r\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\r\n\t\t\t) {\r\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\r\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\t\t\tregistration.unregister().then(() => {\r\n\t\t\t\t\t\twindow.location.reload()\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\t// Service worker found. Proceed as normal.\r\n\t\t\t\tregisterValidSW(swUrl, config)\r\n\t\t\t}\r\n\t\t})\r\n\t\t.catch(() => {\r\n\t\t\tconsole.log(\r\n\t\t\t\t'No internet connection found. App is running in offline mode.'\r\n\t\t\t)\r\n\t\t})\r\n}\r\n\r\nexport function unregister() {\r\n\tif ('serviceWorker' in navigator) {\r\n\t\tnavigator.serviceWorker.ready.then(registration => {\r\n\t\t\tregistration.unregister()\r\n\t\t})\r\n\t}\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './styles/index.css'\nimport Reader from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<Reader />, document.getElementById('root'))\nserviceWorker.register()\n"],"sourceRoot":""}